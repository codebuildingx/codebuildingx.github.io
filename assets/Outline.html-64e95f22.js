import{ab as n,G as s,H as a,ad as t}from"./framework-f86f98ae.js";const p={},e=t(`<h1 id="c-面经" tabindex="-1"><a class="header-anchor" href="#c-面经" aria-hidden="true">#</a> c++面经</h1><h2 id="c-基础" tabindex="-1"><a class="header-anchor" href="#c-基础" aria-hidden="true">#</a> c++基础</h2><h3 id="c-内存模型" tabindex="-1"><a class="header-anchor" href="#c-内存模型" aria-hidden="true">#</a> c++内存模型</h3><p>C++内存分为5个区域（堆栈全常代)</p><p><strong>堆 heap</strong> ： 由new分配的内存块，其释放编译器不去管，由我们程序自己控制（一个new对应一个delete）。如果程序员没有释放掉，在程序结束时OS会自动回收。涉及的问题：“缓冲区溢出”、“内存泄露”</p><p><strong>栈 stack</strong> ： 是那些编译器在需要时分配，在不需要时自动清除的存储区。存放局部变量、函数参数。 存放在栈中的数据只在当前函数及下一层函数中有效，一旦函数返回了，这些数据也就自动释放了。</p><p><strong>全局/静态存储区 （.bss段和.data段）</strong> ： 全局和静态变量被分配到同一块内存中。在C语言中，未初始化的放在.bss段中，初始化的放在.data段中；在C++里则不区分了。</p><p><strong>常量存储区 （.rodata段）</strong> ： 存放常量，不允许修改（通过非正当手段也可以修改）</p><p><strong>代码区 （.text段）</strong> ： 存放代码（如函数），不允许修改（类似常量存储区），但可以执行（不同于常量存储区）</p><h3 id="易混淆的几种指针相关的写法" tabindex="-1"><a class="header-anchor" href="#易混淆的几种指针相关的写法" aria-hidden="true">#</a> 易混淆的几种指针相关的写法</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>int *p[10]表示指针数组，强调数组概念，是一个数组变量，数组大小为10，数组内每个元素都是指向int类型的指针变量。</p><p>int (*p)[10]表示数组指针，强调是指针，只有一个变量，是指针类型，不过指向的是一个int类型的数组，这个数组大小是10。</p><p>int *p(int)是函数声明，函数名是p，参数是int类型的，返回值是int *类型的。</p><p>int (*p)(int)是函数指针，强调是指针，该指针指向的函数具有int类型参数，并且返回值是int类型的。</p><h3 id="c-中static关键字的作用" tabindex="-1"><a class="header-anchor" href="#c-中static关键字的作用" aria-hidden="true">#</a> C++中static关键字的作用</h3><p><strong>c/c++共有</strong></p><p>1）：修饰<strong>全局变量</strong>时，表明一个全局变量只对定义在同一文件中的函数可见。</p><p>2）：修饰<strong>局部变量</strong>时，该变量的值只会初始化一次，不会因为函数终止而丢失。但是只能在函数内部使用。</p><p>3）：修饰<strong>函数</strong>时，表明该函数只在同一文件中调用，不能被其他文件调用。</p><p><strong>c++独有：</strong></p><p>4）：修饰类的<strong>数据成员</strong>，表明对该类所有对象共享该数据。</p><p>5）：用static修饰<strong>类成员函数</strong>。类成员函数可以直接通过类名+函数名调用，无须新建对象。一个静态成员函数只能访问传入的参数、类的静态数据成员和全局变量。因为static修饰的函数中不能使用this指针。</p><h3 id="new、operator-new与placement-new区别是什么" tabindex="-1"><a class="header-anchor" href="#new、operator-new与placement-new区别是什么" aria-hidden="true">#</a> new、operator new与placement new区别是什么?</h3><p><strong>new</strong>：</p><p>new是一个关键字，不能被重载。</p><p>new 操作符的执行过程如下：</p><ol><li>调用operator new分配内存 ；</li><li>调用构造函数生成类对象；</li><li>返回相应指针。</li></ol><p><strong>operator new</strong>：</p><p>operator new就像operator + 一样，是<strong>可以重载</strong>的。如果类中没有重载operator new，那么调用的就是<strong>全局的::operator new</strong>来完成堆的分配。同理，operator new[]、operator delete、operator delete[]也是可以重载的。</p><p><strong>placement new</strong>：</p><p><strong>只是operator new重载的一个版本</strong>。它并不分配内存，只是返回指向已经分配好的某段内存的一个指针。因此不能使用delete关键字删除它，需要<strong>手动调用对象的析构函数</strong>。</p><p>如果你想在<strong>已经分配的内存</strong>中创建一个对象，使用new时行不通的。也就是说placement new允许你在一个已经分配好的内存中（栈或者堆中）构造一个新的对象。原型中void* p实际上就是指向一个已经分配好的内存缓冲区的的首地址。</p><p><strong>STL</strong>中常用placement new去指定内存地址创建对象。</p><h3 id="在a函数里用指针申请好空间后-这块空间需要返回给b函数-然后b函数使用后不再使用这块内存-虽然我们可以手动释放-但往往可能忘记释放-请问用什么方式解决" tabindex="-1"><a class="header-anchor" href="#在a函数里用指针申请好空间后-这块空间需要返回给b函数-然后b函数使用后不再使用这块内存-虽然我们可以手动释放-但往往可能忘记释放-请问用什么方式解决" aria-hidden="true">#</a> 在A函数里用指针申请好空间后，这块空间需要返回给B函数，然后B函数使用后不再使用这块内存，虽然我们可以手动释放，但往往可能忘记释放，请问用什么方式解决?</h3><p>可以使用智能指针解决。</p><p>下面是一个例子， A1、B1使用的是原生的指针， 如果B1()函数中不手动调用delete，就会造成内存泄漏。 A2、B2使用的是智能指针， B2()中无需手动调用delete。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Stu</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Stu</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token function">age_</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    <span class="token function">Stu</span><span class="token punctuation">(</span><span class="token keyword">const</span> Stu<span class="token operator">&amp;</span> another<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        age_ <span class="token operator">=</span> another<span class="token punctuation">.</span>age_<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;call copy constructor&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">get_age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> age_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Stu<span class="token operator">*</span> <span class="token function">create_A1</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Stu <span class="token operator">*</span>stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Stu</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> stu<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">B1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Stu<span class="token operator">*</span> stu_ptr <span class="token operator">=</span> <span class="token function">create_A1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;student age = &quot;</span> <span class="token operator">&lt;&lt;</span> stu_ptr<span class="token operator">-&gt;</span><span class="token function">get_age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> stu_ptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

shared_ptr<span class="token operator">&lt;</span>Stu<span class="token operator">&gt;</span> <span class="token function">create_A2</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    shared_ptr<span class="token operator">&lt;</span>Stu<span class="token operator">&gt;</span> stu_ptr <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Stu<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> stu_ptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">B2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    shared_ptr<span class="token operator">&lt;</span>Stu<span class="token operator">&gt;</span> stu_ptr <span class="token operator">=</span> <span class="token function">create_A2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;student age = &quot;</span> <span class="token operator">&lt;&lt;</span> stu_ptr<span class="token operator">-&gt;</span><span class="token function">get_age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">B1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">B2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="智能指针shared-ptr的循环引用问题" tabindex="-1"><a class="header-anchor" href="#智能指针shared-ptr的循环引用问题" aria-hidden="true">#</a> 智能指针shared_ptr的循环引用问题</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>B<span class="token operator">&gt;</span> pointer_B<span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;A已经被删除&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>A<span class="token operator">&gt;</span> pointer_A<span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;B已经被删除&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>A<span class="token operator">&gt;</span> <span class="token function">pointer_A</span><span class="token punctuation">(</span><span class="token keyword">new</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>B<span class="token operator">&gt;</span> <span class="token function">pointer_B</span><span class="token punctuation">(</span><span class="token keyword">new</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pointer_A<span class="token operator">-&gt;</span>pointer_B <span class="token operator">=</span> pointer_B<span class="token punctuation">;</span>
        pointer_B<span class="token operator">-&gt;</span>pointer_A <span class="token operator">=</span> pointer_A<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/website/quick/cpp/loop-reference.drawio.png" alt="循环引用" tabindex="0" loading="lazy"><figcaption>循环引用</figcaption></figure><h2 id="类和对象篇" tabindex="-1"><a class="header-anchor" href="#类和对象篇" aria-hidden="true">#</a> 类和对象篇</h2><h3 id="构造函数是否可以是虚函数" tabindex="-1"><a class="header-anchor" href="#构造函数是否可以是虚函数" aria-hidden="true">#</a> 构造函数是否可以是虚函数?</h3><p>不可以。虚函数的调用是通过虚函数表来查找的，而虚函数表由类的实例化对象的vptr指针指向，该指针存放在对象的内部空间中，需要调用构造函数完成初始化。如果构造函数是虚函数，那么调用构造函数就需要去找vptr，但此时vptr还没有初始化。构造函数将无法调用。</p><h3 id="析构函数是否可以是虚函数" tabindex="-1"><a class="header-anchor" href="#析构函数是否可以是虚函数" aria-hidden="true">#</a> 析构函数是否可以是虚函数?</h3><p>可以。与构造函数不同，vptr已经完成初始化，析构函数可以声明为虚函数，且类有继承时，析构函数常常必须为虚函数。</p><h3 id="构造函数是否可以抛出异常" tabindex="-1"><a class="header-anchor" href="#构造函数是否可以抛出异常" aria-hidden="true">#</a> 构造函数是否可以抛出异常?</h3><p>可以， 但不建议。</p><h3 id="析构函数是否可以抛出异常" tabindex="-1"><a class="header-anchor" href="#析构函数是否可以抛出异常" aria-hidden="true">#</a> 析构函数是否可以抛出异常?</h3><p>C++<strong>允许</strong>在析构函数中抛出异常， 但是并<strong>不推荐</strong>在析构函数中抛出异常。</p><p>在析构函数中抛出异常，可能会出现下面的问题：</p><p>（1）对象正常结束，在析构时，触发析构函数中的异常，打印异常信息，退出。在这种情况下，抛出异常并没有什么问题，析构函数的异常会被外面捕获；当然，如果外面的程序没有继续释放剩余的资源，可能会造成内存泄露。</p><p>（2）对象离开作用域之前，抛出异常，此时会调用析构函数，析构函数再抛出异常，此时之前的异常就不能被捕获了，而且会造成程序crash。</p><p>因此<strong>尽可能不让异常逃离析构函数</strong>, 可以用try catch吞掉异常。</p><h3 id="如何禁用拷贝构造函数" tabindex="-1"><a class="header-anchor" href="#如何禁用拷贝构造函数" aria-hidden="true">#</a> 如何禁用拷贝构造函数</h3><ul><li><p>如果你的编译器支持 C++11，直接使用 delete</p></li><li><p>可以把拷贝构造函数和赋值操作符声明成private同时不提供实现。</p></li><li><p>可以通过一个基类来封装第二步，因为默认生成的拷贝构造函数会自动调用基类的拷贝构造函数，如果基类的拷贝构造函数是private，那么它无法访问，也就无法正常生成拷贝构造函数。</p></li></ul><h3 id="const成员方法中如果要修改成员变量的值-要怎么做" tabindex="-1"><a class="header-anchor" href="#const成员方法中如果要修改成员变量的值-要怎么做" aria-hidden="true">#</a> const成员方法中如果要修改成员变量的值，要怎么做？</h3><ul><li>方法1：使用mutable关键字</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> 
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token function">m_</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">const_set</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
        m_ <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">get_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> m_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">mutable</span> <span class="token keyword">int</span> m_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    A <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span><span class="token function">const_set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a value = &quot;</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">get_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法2：const成员函数中的this指针是被增加了const属性的， 可以强制类型转换去掉const。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> 
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token operator">:</span>
      <span class="token function">m_</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">const_set</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">const</span>
    <span class="token punctuation">{</span>
        <span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>m_ <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">get_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> m_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> m_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    A <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span><span class="token function">const_set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a value = &quot;</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">get_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stl" tabindex="-1"><a class="header-anchor" href="#stl" aria-hidden="true">#</a> STL</h2><h3 id="vector的扩容机制是怎样的" tabindex="-1"><a class="header-anchor" href="#vector的扩容机制是怎样的" aria-hidden="true">#</a> vector的扩容机制是怎样的？</h3><p>当vector的大小和容量相等（size==capacity）也就是满载时，如果再向其添加元素，那么vector就需要扩容。vector容器扩容的过程需要经历以下3步：</p><ul><li>完全弃用现有的内存空间，重新申请更大的内存空间;</li><li>将旧内存空间中的数据，按原有顺序移动到新的内存空间中;</li><li>最后将旧的内存空间释放;</li></ul><p>扩容因子由编译器决定，vs的扩容因子为<strong>1.5</strong>，gcc中，扩容因子为<strong>2</strong>。一般认为扩容因子1.5优于2.0，原因是以1.5作为扩容因子可以实现复用释放的内存空间。</p><h3 id="push-back和emplace-back的区别" tabindex="-1"><a class="header-anchor" href="#push-back和emplace-back的区别" aria-hidden="true">#</a> push_back和emplace_back的区别</h3><p>emplace_back可以传递任意的用户传递进来的参数，<strong>直接在容器的尾部</strong>调用对应的构造函数构造对象，包括<strong>无参构造函数</strong>，<strong>有参构造函数</strong>，<strong>复制构造函数</strong>， <strong>移动构造函数等</strong>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">emplace_back</span> <span class="token punctuation">(</span>Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>push_back只能接受左值引用或者右值引用， 它也是<strong>直接在容器的尾部</strong>直接构造对象，但是只会调用到类的<strong>复制构造函数</strong>， <strong>移动构造函数等</strong>。</p><p><strong>注意</strong>：push_back目前已经不会通过先生成临时对象，再复制到容器尾这种低效的方式，它也是通过直接在容器内的尾部地址上直接创建对象。(网上很多文章关于这个点理解不太正确，容易误导人)</p><p>可以通过下面的例子看出二者的区别。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">class</span> <span class="token class-name">A</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">A</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span> 
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;call A () \\n&quot;</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token function">A</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> 
        <span class="token operator">:</span> <span class="token function">a_</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token function">b_</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;call A (int a, int b) \\n&quot;</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span> other<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        a_ <span class="token operator">=</span> other<span class="token punctuation">.</span>a_<span class="token punctuation">;</span>
        b_ <span class="token operator">=</span> other<span class="token punctuation">.</span>b_<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;I am being copy constructed.\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">A</span><span class="token punctuation">(</span>A<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span>    
    <span class="token punctuation">{</span>  
        a_ <span class="token operator">=</span> other<span class="token punctuation">.</span>a_<span class="token punctuation">;</span>
        b_ <span class="token operator">=</span> other<span class="token punctuation">.</span>b_<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;I am being moved.\\n&quot;</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> 

<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> a_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> b_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>A<span class="token operator">&gt;</span> vec<span class="token punctuation">;</span>
        vec<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        A <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;call emplace_back:\\n&quot;</span><span class="token punctuation">;</span>
        vec<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vec<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vec<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vec<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;----------------------\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>A<span class="token operator">&gt;</span> vec<span class="token punctuation">;</span>
        vec<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        A <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;call push_back:\\n&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// vec.push_back(); 错误</span>
        <span class="token comment">// vec.push_back(1,2);错误</span>
        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>call A (int a, int b) 
call emplace_back:
call A () 
call A (int a, int b) 
I am being copy constructed.
I am being moved.
----------------------
call A (int a, int b) 
call push_back:
I am being copy constructed.
I am being moved.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vector-resize-reserve的区别" tabindex="-1"><a class="header-anchor" href="#vector-resize-reserve的区别" aria-hidden="true">#</a> vector resize/reserve的区别</h3><p><strong>resize</strong>:</p><p>resize(n)</p><p>如果n大于当前容器的capacity，size修改为n， capacity也变为n。 这个过程中除了会分配空间以外，也会完成对象的构建。</p><p>如果n小于当前容器的capacity，size修改为n， capacity不变。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;size: &quot;</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;capacity: &quot;</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    
    v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;size: &quot;</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;capacity: &quot;</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;size: &quot;</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;capacity: &quot;</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;size: &quot;</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;capacity: &quot;</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;size: &quot;</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;capacity: &quot;</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>size: 5
capacity: 5
size: 8
capacity: 10
size: 9
capacity: 10
size: 5
capacity: 10
size: 15
capacity: 15
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>reserve</strong>:</p><p>reserve(n)</p><p>n大于当前容器的capacity时，会改变容器的capacity。这个过程只是分配空间， 不负责构建内容。</p><p>当n小于或者等于当前容量时，reserve什么也不做。</p><h3 id="deque容器的原理" tabindex="-1"><a class="header-anchor" href="#deque容器的原理" aria-hidden="true">#</a> deque容器的原理</h3><figure><img src="https://raw.githubusercontent.com/zgjsxx/static-img-repo/main/website/quick/cpp/deque.png" alt="循环引用" tabindex="0" loading="lazy"><figcaption>循环引用</figcaption></figure>`,89),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Outline.html.vue"]]);export{r as default};

import{ab as t,G as n,H as r,E as e,S as o,N as c,ad as s,W as d}from"./framework-f86f98ae.js";const i={},h=s('<h1 id="数据结构与算法" tabindex="-1"><a class="header-anchor" href="#数据结构与算法" aria-hidden="true">#</a> 数据结构与算法</h1><h2 id="基础题" tabindex="-1"><a class="header-anchor" href="#基础题" aria-hidden="true">#</a> 基础题</h2><h3 id="_10亿个数据-从中找出最大的k个数-topk问题" tabindex="-1"><a class="header-anchor" href="#_10亿个数据-从中找出最大的k个数-topk问题" aria-hidden="true">#</a> 10亿个数据，从中找出最大的k个数(topK问题)</h3><p>首先建一个堆，若是求前k个最大的数(降序)就建大堆，反之(升序)建小堆，但此次建堆只建k个数的堆(之前是建N个数的堆)，然后将剩下N-K个数依次去和堆顶的数(根节点)进行比较，如果要比堆顶的数大，则替换堆顶的数，再进行向下调整算法，然后循环依次进行比较，最终，最大的前k个数，就在该堆里面；</p>',4),l={href:"https://blog.csdn.net/weixin_43937101/article/details/114880124?share_token=6124cf34-46be-4e0b-9838-2474aa674d24",target:"_blank",rel:"noopener noreferrer"};function _(k,p){const a=d("ExternalLinkIcon");return n(),r("div",null,[h,e("p",null,[e("a",l,[o("https://blog.csdn.net/weixin_43937101/article/details/114880124?share_token=6124cf34-46be-4e0b-9838-2474aa674d24"),c(a)])])])}const b=t(i,[["render",_],["__file","Outline.html.vue"]]);export{b as default};
